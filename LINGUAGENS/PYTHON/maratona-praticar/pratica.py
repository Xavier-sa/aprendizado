### **üìå 1. Introdu√ß√£o ao Python (Fundamentos)**
Antes de resolver problemas, voc√™ precisa dominar:  

#### **üîπ Vari√°veis e Tipos de Dados**
```python
nome = "Jo√£o"       # String (texto)
idade = 25          # Inteiro
altura = 1.75       # Float (decimal)
eh_estudante = True # Booleano (True/False)
```

#### **üîπ Operadores B√°sicos**
```python
a = 10
b = 3

soma = a + b       # 13
subtracao = a - b  # 7
multiplicacao = a * b  # 30
divisao = a / b    # 3.333...
resto = a % b      # 1 (resto da divis√£o)
```

#### **üîπ Estruturas Condicionais (`if`, `else`)**
```python
nota = 7.5

if nota >= 7:
    print("Aprovado!")
else:
    print("Reprovado.")
```

#### **üîπ Loops (`for`, `while`)**
```python
# Imprimir n√∫meros de 1 a 5
for i in range(1, 6):
    print(i)

# Loop while (enquanto condi√ß√£o for verdadeira)
contador = 0
while contador < 5:
    print(contador)
    contador += 1
```

#### **üîπ Listas e Dicion√°rios**
```python
# Lista (ordenada, mut√°vel)
frutas = ["ma√ß√£", "banana", "laranja"]
frutas.append("uva")  # Adiciona no final

# Dicion√°rio (chave-valor)
aluno = {"nome": "Maria", "idade": 22, "curso": "Engenharia"}
print(aluno["nome"])  # Sa√≠da: Maria
```

---

### **üìå 2. Fun√ß√µes em Python**
Fun√ß√µes ajudam a organizar e reutilizar c√≥digo.  

#### **üîπ Fun√ß√£o B√°sica**
```python
def saudacao(nome):
    return f"Ol√°, {nome}!"

print(saudacao("Carlos"))  # Sa√≠da: Ol√°, Carlos!
```

#### **üîπ Fun√ß√£o com Condicional**
```python
def eh_par(numero):
    if numero % 2 == 0:
        return True
    else:
        return False

print(eh_par(4))  # Sa√≠da: True
```

---

### **üìå 3. Problemas B√°sicos para Praticar**
Agora vamos resolver alguns problemas simples:  

#### **üîπ Problema 1: Soma de Dois N√∫meros**  
*Escreva uma fun√ß√£o que recebe dois n√∫meros e retorna a soma deles.*  

**Solu√ß√£o:**  
```python
def soma(a, b):
    return a + b

print(soma(5, 3))  # Sa√≠da: 8
```

#### **üîπ Problema 2: Contar Vogais em uma String**  
*Conte quantas vogais (a, e, i, o, u) existem em uma palavra.*  

**Solu√ß√£o:**  
```python
def contar_vogais(palavra):
    vogais = "aeiouAEIOU"
    contador = 0
    for letra in palavra:
        if letra in vogais:
            contador += 1
    return contador

print(contar_vogais("Python"))  # Sa√≠da: 1 (o)
```

#### **üîπ Problema 3: Encontrar o Maior N√∫mero em uma Lista**  
*Dada uma lista de n√∫meros, retorne o maior valor.*  

**Solu√ß√£o:**  
```python
def maior_numero(lista):
    return max(lista)  # Fun√ß√£o pronta do Python

# Ou implementando manualmente:
def maior_numero_manual(lista):
    maior = lista[0]
    for numero in lista:
        if numero > maior:
            maior = numero
    return maior

print(maior_numero([3, 8, 2, 10]))  # Sa√≠da: 10
```

---

### **üìå 4. Pr√≥ximos Passos (Intermedi√°rio)**  
Quando estiver confort√°vel com o b√°sico, podemos avan√ßar para:  
- **Manipula√ß√£o de strings** (fatiamento, m√©todos como `.split()`, `.join()`).  
- **List comprehensions** (forma concisa de criar listas).  
- **Fun√ß√µes lambda** (fun√ß√µes an√¥nimas).  
- **Tratamento de erros** (`try`, `except`).  

**Quer um desafio agora?**  
Tente resolver este problema:  

**Desafio:**  
*Escreva uma fun√ß√£o que recebe uma lista de n√∫meros e retorna uma nova lista apenas com os n√∫meros **√∫nicos** (sem repeti√ß√µes).*  

<details>
<summary>üîç Solu√ß√£o (clique para ver)</summary>

```python
def numeros_unicos(lista):
    return list(set(lista))  # Convertendo para set (remove duplicatas)

print(numeros_unicos([1, 2, 2, 3, 4, 4, 5]))  # Sa√≠da: [1, 2, 3, 4, 5]
```
</details>

---

